#!/bin/sh

# Formatting variables
blackBG='\033[1;40m'
cyan='\033[1;36m'$blackBG
gray='\033[1;37m'$blackBG
green='\033[1;32m'$blackBG
purple='\033[1;35m'$blackBG
red='\033[0;31m'$blackBG
yellow='\033[1;33m'$blackBG
nc='\033[0m'$blackBG

project=$(pwd | sed -e "s/.*\///g")
branch=$(git rev-parse --abbrev-ref HEAD)

# if the version hasn't been bumped, bump it
packageDiff=$(git diff package.json)
if [ ${#packageDiff} -eq 0 ]
then
grunt bump:patch
fi

# get everything ready
echo "Getting version number.\n"
grunt version
grunt build --production

# figure out the version
version=$(cat VERSION)

# checkout a branch for this version
echo "Checking out ${cyan}latest${nc} branch for ${cyan}v${version}${nc}.\n"
git branch -D latest
git checkout -b latest

# add the distribution file & push it
echo "Adding build file to latest branch and pushing to remote.\n"
git rm -rf {scripts,src}
git rm -rf {.gitignore,Gruntfile.js,package.json}
git add -f assets
git add -f index.html
git commit -am "v${version}"
git push origin latest --force

# remove "latest" tag on the remote & create a new local one
echo "Creating new tag for ${cyan}v${version}${nc} and pushing to remote.\n"
git tag -f v${version}

# push up new tags
echo "Pushing tags up to remote.\n"
git push origin --tags

# cleanup
echo "Cleaning up and checking out ${cyan}${branch}${nc}.\n"
rm -rf VERSION

# go back to where you started
git checkout $branch

# run collect
grunt collect

echo "${green}Done!${nc}\n\n"

echo "\n  To deploy, use this:\n\n      ${cyan}git push --force origin latest:master${nc}\n"
